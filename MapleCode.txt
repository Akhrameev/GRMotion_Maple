restart:
with(Maplets):
with(Maplets[Elements]):
with(RandomTools):
with (plots):
path := currentdir ():
global GRMotion_path:
#Путь по умолчанию: можно указать path (тогда будет папка с Maple)
GRMotion_path := "C:\\GRMotion";
randomize():
#Генерация начальных значений для потока фотонов:
global Radius: 
Radius := convert (Generate (posint(range=5)),string):
global Theta: 
Theta := convert (Generate (posint(range=90)),string):
global Phi: 
Phi := convert (Generate (posint(range=90)),string):

#Процедура изменения папки
ChangeDirectory := proc (value)
	global GRMotion_path:
	if value = "" or value = 'cancel' then
		value := currentdir ();
	end if:
	GRMotion_path := value;
	#print (GRMotion_path);
	Maplets:-Tools:-Set ('TF_FilePath' = GRMotion_path);
end proc:

#окно предупреждения, на случай, если указана некорректная папка.
maplet_ircorrect_path := Maplet 
(
	MessageDialog
	(
		warning, 
		"Выберите подходящую папку с GRMotion2.exe, папка должна быть доступна на чтение и запись!", 
		'onapprove'=Shutdown()
	)
):

#Основная процедура, запускающая рассчет
StartGRMotion3 := proc ()
	local trajectory_dat:
	local grmotion_2_exe:
	local grmotion_2_exe_launch:
	local pad_dat:
	local randnum_dat:
	local par_dat:
	local fd:
	local lines:
	local i:
	local DataInMatrix:
	local Converted:
	local ListOfPlots:
	local r:
	local theta:
	local phi:
	global GRMotion_path:
	#GRMotion_path := "C:\\GRMotion";
	#"C:\\Program Files (x86)\\Maple 15"
	trajectory_dat := cat (GRMotion_path, "\\Trajectory.dat");
	grmotion_2_exe := cat (GRMotion_path, "\\GRMotion2.exe");
	grmotion_2_exe_launch := cat("cd..&cd..&cd..&cd..&cd ", GRMotion_path, "&", GRMotion_path, "\\GRMotion2.exe");
	pad_dat := cat (GRMotion_path, "\\par.dat");
	randnum_dat := cat (GRMotion_path, "\\RandNum.dat");
	#RandNum 1..1000000000
	#GRMotion3.exe
	#spectra (par.dat may be the same)	
	fd := FileTools[Text][Open](randnum_dat, create=true, overwrite=true);
	FileTools[Text][WriteString] (fd, convert (rand(),string)); 
	FileTools[Text][Close](fd);
	#radius, 0..90, 0..180
	#into par.dat
	#GRMotion2.exe
	#in science mode may be phi , theta, radius
	#trajectory[t].dat : radius, theta, phi, time
	#total.dat - status of last photon in trajectory
	#Dist.dat - radius, phi
	
	#Передача параметров в вычислительный модуль
	fd := FileTools[Text][Open](pad_dat, create=true, overwrite=true);
	FileTools[Text][WriteString] (fd, Maplets:-Tools:-Get('TF_Radius'));
	FileTools[Text][WriteString] (fd, " "); 	
	FileTools[Text][WriteString] (fd, Maplets:-Tools:-Get('TF_Theta'));
	FileTools[Text][WriteString] (fd, " "); 	
	FileTools[Text][WriteString] (fd, Maplets:-Tools:-Get('TF_Phi')); 
	FileTools[Text][WriteString] (fd, " "); 
	FileTools[Text][Close](fd);
	if (FileTools[Exists](grmotion_2_exe)) then
		if (FileTools[Exists](trajectory_dat)) then
			FileTools[Remove](trajectory_dat);
		end if:
		#Запуск рассчета
		system(grmotion_2_exe_launch);
		while (not FileTools[Exists](trajectory_dat))
		do
			print ("waiting Trajectory.dat to appear"):
			sleep (100);
		end do:
		#Чтение данных результата
		lines := FileTools[Text][CountLines] (trajectory_dat);
		#print (lines);
		DataInMatrix := Matrix (lines, 3);
		for i from 1 to lines by 1 do
			DataInMatrix [i, 1] := FileTools[Text][ReadNextFloat](fd);
			#print (DataInMatrix [i, 1]);
			DataInMatrix [i, 2] := FileTools[Text][ReadNextFloat](fd);
			#print (DataInMatrix [i, 2]);
			DataInMatrix [i, 3] := FileTools[Text][ReadNextFloat](fd);
			#print (DataInMatrix [i, 3]);
			#DataInMatrix [i, 4] := 
			FileTools[Text][ReadNextFloat](fd);
			if DataInMatrix [i, 1] > 15 then
				DataInMatrix [i, 1] := DataInMatrix [1, 1]:
				DataInMatrix [i, 2] := DataInMatrix [1, 2]:
				DataInMatrix [i, 3] := DataInMatrix [1, 3]
			end if:
			if DataInMatrix [i, 1] < 0.7 then
				i := lines:
			end if:
			#print (DataInMatrix [i, 4]);
			#print ("next string");
		end do:
		FileTools[Text][Close] (fd);
		#Механическое преобразование в декартовы координаты
		Converted := DataInMatrix;
		for i from 1 to lines by 1 do
			#print (i):
			r := evalf (DataInMatrix [i, 1]):
			theta := evalf (DataInMatrix [i, 2]):
			phi := evalf (DataInMatrix [i, 3]):
			Converted [i, 1] := evalf (r * sin ((Pi/180.0)*theta) * cos ((Pi/180.0)*phi));
			Converted [i, 2] := evalf (r * sin ((Pi/180.0)*theta) * sin ((Pi/180.0)*phi));
			Converted [i, 3] := evalf (r * cos ((Pi/180.0)*theta));
			#print (Converted [i, 1]):
			#print (Converted [i, 2]):
			#print (Converted [i, 3]):
		end do:
		#print ("pointplot3d ready"):
		Maplets:-Tools:-Set('plotter'= display(pointplot3d (Converted), axes=boxed, symbol=solidsphere, scaling=constrained))
	else
		Maplets[Display](maplet_ircorrect_path)
	end if;
	
end proc:

#Файловый диалог смены папки
maplet2 := Maplet
(
   FileDialog['TF_GRMotion_Directory']
	(
		directory = GRMotion_path, 
		fileselectionmode = directoriesonly, 
		title = "Выберите папку с файлами GRMotion",
		'onapprove' = Shutdown(['TF_GRMotion_Directory']),
		'oncancel' = Shutdown('cancel')
	)
):

#Процедура запуска файлового диалога выбора папки
rline := proc () 
	local fn:
	local str:
	fn := Maplets[Display](maplet2); 
	str := op(fn):
	ChangeDirectory (str)
end proc:

#Процедура, показывающая Помощь
ShowHelp := proc ()
	Display
	(
		Maplet
		(
			Window
			(
				title = "Помощь",
				resizable = false,
				[
					"Расчет и визуализация движения потока фотонов в гравитационном поле вращающейся чёрной дыры в рамках общей теории относительности.\n \nПрограмма позволяет вычислить и отобразить на экране компьютера траекторию кванта, движущегося вблизи вращающейся чёрной дыры (в метрике Керра) со скоростью света.\nДля работы программы необходимо иметь доступ на чтение и запись к папке GRMotion, содержащей вычислительный модуль и фотографию автора программы (Павла Ахрамеева).\nПосле запуска программы, если папка отличается от C:\\GRMotion, необходимо указать её, нажав кнопку \"Указать Папку\".\nДальше в текстовые поля предлагается ввести три координаты кванта: радиальную и два ушла скорости (Тетта - в плоскости аккреционного диска, Фи - в плоскости, перпендикулярной диску).\nЗамечу, что программа по умолчанию генерирует случайные значения в подходящем диапозоне, чтобы Вы могли сразу перейти к следующему этапу.\nНажмите кнопку \"Рассчитать и показать\", чтобы программа приступила к вычислению и отображению траектории кванта.\n\nРежим построения спектра, движение квантов в метрике Швардшильда и сохранение траекторий находятся на стадии разработки.\nСобственно, отображение самой чёрной дыры (в точке (0,0,0) с радиусом примерно 0.86) также в разработке.",
					Button ("OK", onclick = Shutdown ())
				]
			)
		)
	)
end proc:

#Процедура, показывающая окно "О программе"
ShowAbout := proc ()
	global GRMotion_path:
	Display
	(
		Maplet
		(
			Window
			(
				title = "О программе",
				[
					"GRMotion 1.0.3\nРасчет и визуализация движения потока фотонов в гравитационном поле\nвращающейся чёрной дыры в рамках общей теории относительности.\n\nПроект сделал в образовательных целях.\nGitHub: https://github.com/Akhrameev/GRMotion_Maple",
					Label (Image ("C:\\GRMotion\\I.jpg")),
					[
						"Разработчик и автор идеи:\n\n\n\n",
						"Павел Ахрамеев\np.akhrameev@gmail.com\nvk.com/p0sha\nстудент 313 группы ВМК МГУ\n2012 год"
					],
					Button ("OK", onclick = Shutdown ())
				]
			)
		)
	)
end proc:

#Главное меню программы
maplet1 := Maplet
(
   Window ['GlobalMenu']
   (
		title="GRMotion",
		'menubar' = 'MenuBarGRMotion',
		[
			[
				TextField['TF_FilePath'](GRMotion_path, width = 50),
				Button("Указать Папку", Evaluate(function = 'rline()'))
			],
			[
				"Радиус:",
				TextField['TF_Radius'](Radius, width = 50)
			],
			[
				"Тетта:  ",
				TextField['TF_Theta'](Theta, width = 50)
			],
			[
				"Фи:     ",
				TextField['TF_Phi'](Phi, width = 50)
			],
			Button['B_Start']
			(
				"Рассчитать и показать", 
				Action 
				(
					Evaluate(function = 'StartGRMotion3()')
				)
			),
			Plotter['plotter'](width = 600, height = 400)
		]
	),
	#Верхнее меню с выходом и со справкой
	MenuBar['MenuBarGRMotion']
	(
		Menu
		(
			"Меню",
			MenuItem
			(
				"Выход",     
				Shutdown()
			)
		),
		Menu
		(
			"Справка",    
			MenuItem
			(
				"Помощь",
				onclick = Evaluate (function = "ShowHelp")
			),     
			MenuItem
			(
				"О программе",
				onclick = Evaluate (function = "ShowAbout")
			)
		)  
	)
):

Maplets[Display](maplet1):

